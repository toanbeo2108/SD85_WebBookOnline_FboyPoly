// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SD85_WebBookOnline.Api.Data;

#nullable disable

namespace SD85_WebBookOnline.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cf58a6a8-2f8f-4d45-af9e-897377f51a69",
                            ConcurrencyStamp = "89b7a2d9-d824-418c-851f-8c5e39184e90",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1cdb5564-8e1e-4d62-9ddb-29f5413b3e42",
                            ConcurrencyStamp = "3df82646-6955-4442-8f19-50dfd51c0683",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cc8a65ef-e386-4206-a787-658e3639224f",
                            ConcurrencyStamp = "3264cbe1-ac73-4373-96be-4c46022eff20",
                            Name = "Empolyee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Bill", b =>
                {
                    b.Property<Guid>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceBeforeVoucher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Shipmoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillID");

                    b.HasIndex("UserID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.BillItems", b =>
                {
                    b.Property<Guid>("BillItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("ToTal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillItemID");

                    b.HasIndex("BillID");

                    b.HasIndex("BookID");

                    b.HasIndex("ComboID");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Book", b =>
                {
                    b.Property<Guid>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CouponID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("FormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManufacturerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityExists")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("int");

                    b.HasKey("BookID");

                    b.HasIndex("CouponID");

                    b.HasIndex("FormID");

                    b.HasIndex("ManufacturerID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.BookDetail", b =>
                {
                    b.Property<Guid>("BookDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LagugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangugeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookDetailID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BookID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("LangugeID");

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceBeforeVoucher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.HasIndex("UserID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.CartItems", b =>
                {
                    b.Property<Guid>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("ToTal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartItemID");

                    b.HasIndex("BookID");

                    b.HasIndex("CartID");

                    b.HasIndex("ComboID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryParentID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.CategoryParent", b =>
                {
                    b.Property<Guid>("CategoryParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryParentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryParentID");

                    b.ToTable("CategoryParents");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Combo", b =>
                {
                    b.Property<Guid>("ComboID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatebyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ComboID");

                    b.ToTable("Combo");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.ComboItem", b =>
                {
                    b.Property<Guid>("ComboItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("ToTal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ComboItemID");

                    b.HasIndex("BookID");

                    b.HasIndex("ComboID");

                    b.ToTable("ComboItem");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Coupon", b =>
                {
                    b.Property<Guid>("CouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PercentDiscount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CouponID");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.DeliveryAddress", b =>
                {
                    b.Property<Guid>("DeliveryAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsigneeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryAddressID");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Form", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FormId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Images", b =>
                {
                    b.Property<Guid>("ImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ImagesID");

                    b.HasIndex("BookID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.InputSlip", b =>
                {
                    b.Property<Guid>("InputSlipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("GiaNhap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("IdNhanVienNhap")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSachNhap")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("NgayNhap")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SoLuong")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InputSlipID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserId");

                    b.ToTable("InputSlip");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Languge", b =>
                {
                    b.Property<Guid>("LangugeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LangugeID");

                    b.ToTable("Languges");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("ManufactureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufactureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ManufactureID");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.PostBanner", b =>
                {
                    b.Property<Guid>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostID");

                    b.ToTable("PostBanner");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountCondition")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoucherID");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryAddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Bill", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Voucher", "Voucher")
                        .WithMany("Bill")
                        .HasForeignKey("VoucherID");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.BillItems", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("BillItems")
                        .HasForeignKey("BookID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Combo", "Combo")
                        .WithMany("BillItems")
                        .HasForeignKey("ComboID");

                    b.Navigation("Bill");

                    b.Navigation("Book");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Book", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Coupon", "Coupon")
                        .WithMany("Books")
                        .HasForeignKey("CouponID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Form", "Form")
                        .WithMany("Books")
                        .HasForeignKey("FormID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Manufacturer", "Manufacturer")
                        .WithMany("Books")
                        .HasForeignKey("ManufacturerID");

                    b.Navigation("Coupon");

                    b.Navigation("Form");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.BookDetail", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Author", "Author")
                        .WithMany("BookDetails")
                        .HasForeignKey("AuthorID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("BookDetails")
                        .HasForeignKey("BookID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Category", "Category")
                        .WithMany("BookDetails")
                        .HasForeignKey("CategoryID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Languge", "Languge")
                        .WithMany("BookDetails")
                        .HasForeignKey("LangugeID");

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Category");

                    b.Navigation("Languge");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Cart", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Voucher", "Voucher")
                        .WithMany("Cart")
                        .HasForeignKey("VoucherID");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.CartItems", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("CartItems")
                        .HasForeignKey("BookID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Combo", "Combo")
                        .WithMany("CartItems")
                        .HasForeignKey("ComboID");

                    b.Navigation("Book");

                    b.Navigation("Cart");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Category", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.CategoryParent", "CategoryParent")
                        .WithMany("Categorys")
                        .HasForeignKey("CategoryParentID");

                    b.Navigation("CategoryParent");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.ComboItem", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("ComboItems")
                        .HasForeignKey("BookID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.Combo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboID");

                    b.Navigation("Book");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.DeliveryAddress", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.User", "User")
                        .WithMany("DeliveryAddress")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Images", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookID");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.InputSlip", b =>
                {
                    b.HasOne("SD85_WebBookOnline.Share.Models.Book", "Book")
                        .WithMany("InputSlip")
                        .HasForeignKey("BookID");

                    b.HasOne("SD85_WebBookOnline.Share.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Author", b =>
                {
                    b.Navigation("BookDetails");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Bill", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Book", b =>
                {
                    b.Navigation("BillItems");

                    b.Navigation("BookDetails");

                    b.Navigation("CartItems");

                    b.Navigation("ComboItems");

                    b.Navigation("Images");

                    b.Navigation("InputSlip");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Category", b =>
                {
                    b.Navigation("BookDetails");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.CategoryParent", b =>
                {
                    b.Navigation("Categorys");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Combo", b =>
                {
                    b.Navigation("BillItems");

                    b.Navigation("CartItems");

                    b.Navigation("ComboItems");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Coupon", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Form", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Languge", b =>
                {
                    b.Navigation("BookDetails");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Manufacturer", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.Voucher", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("SD85_WebBookOnline.Share.Models.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Cart");

                    b.Navigation("DeliveryAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
